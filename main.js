(()=>{"use strict";var e=function(e){return e.ok?e.json():Promise.reject("Ошибка: ".concat(e.status))},t=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"Сохранить",r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"Сохранение...";t.textContent=e?r:n},n=function(e,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"Сохранение...";n.preventDefault();var o=n.submitter,a=o.textContent;t(!0,o,a,r),e().then((function(){n.target.reset()})).catch((function(e){console.error("Ошибка: ".concat(e))})).finally((function(){t(!1,o,a)}))},r={baseUrl:"https://mesto.nomoreparties.co/v1/wff-cohort-2",headers:{authorization:"25acbbe0-12c1-426d-be21-ec07addb3936","Content-Type":"application/json"}},o=function(t,n){return fetch("".concat(r.baseUrl,"/").concat(t),n).then(e)},a=function(e){return o("users/me/avatar",{method:"PATCH",headers:r.headers,body:JSON.stringify({avatar:e})})};function c(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var i,u=function(e,t,n,r,o){var a=document.querySelector("#card-template").content.cloneNode(!0),i=a.querySelector(".card__image"),u=a.querySelector(".card__like-count"),l=a.querySelector(".card__like-button"),s=a.querySelector(".card__delete-button");if(a.querySelector(".card__title").textContent=e.name,i.src=e.link,i.alt=e.name,e.likes.length){u.textContent=e.likes.length,u.classList.add("card__like-count_is-active");var d,f=function(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return c(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?c(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,u=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){u=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(u)throw a}}}}(e.likes);try{for(f.s();!(d=f.n()).done;)d.value._id===t&&l.classList.add("card__like-button_is-active")}catch(e){f.e(e)}finally{f.f()}}return e.owner._id!==t&&s.classList.add("card__delete-button_hidden"),i.addEventListener("click",(function(){o(e)})),s.addEventListener("click",(function(t){n(t,e)})),a.querySelector(".card__like-button").addEventListener("click",(function(t){r(t,e)})),a},l=function(e,t){var n;(n=t._id,o("cards/".concat(n),{method:"DELETE",headers:r.headers})).then((function(){e.target.closest(".card").remove()})).catch((function(e){console.log(e)}))},s=function(e,t){var n,a=e.target,c=e.target.closest(".card__like-block").querySelector(".card__like-count");a.classList.contains("card__like-button_is-active")?function(e){return o("cards/likes/".concat(e),{method:"DELETE",headers:r.headers})}(t._id).then((function(e){a.classList.remove("card__like-button_is-active"),e.likes.length?c.textContent=e.likes.length:c.classList.remove("card__like-count_is-active")})).catch((function(e){console.log(e)})):(n=t._id,o("cards/likes/".concat(n),{method:"PUT",headers:r.headers})).then((function(e){a.classList.add("card__like-button_is-active"),c.classList.add("card__like-count_is-active"),c.textContent=e.likes.length})).catch((function(e){console.log(e)}))},d=function(e){e.classList.add("popup_is-opened"),document.addEventListener("keydown",p)},f=function(e){e.classList.remove("popup_is-opened"),document.removeEventListener("keydown",p)},p=function(e){if("Escape"===e.key){var t=document.querySelector(".popup_is-opened");f(t)}},m=function(e,t,n){var r=e.querySelector(".".concat(t.name,"-error"));t.classList.remove(n.inputErrorClass),r.classList.remove(n.errorClass),r.textContent=""},v=function(e,t,n){!function(e){return e.some((function(e){return!e.validity.valid}))}(e)?(t.disabled=!1,t.classList.remove(n.inactiveButtonClass)):(t.disabled=!0,t.classList.add(n.inactiveButtonClass))},y=function(e,t){var n=Array.from(e.querySelectorAll(t.inputSelector)),r=e.querySelector(t.submitButtonSelector);v(n,r,t),n.forEach((function(n){m(e,n,t)}))};function _(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var h,b=document.querySelector(".places__list"),S=document.querySelector(".profile__title"),g=document.querySelector(".profile__description"),k=document.querySelector(".profile__image"),E=document.querySelectorAll(".popup"),L=document.querySelectorAll(".popup__close"),C=document.querySelector(".popup_type_edit"),q=document.querySelector(".profile__edit-button"),A=document.forms["edit-profile"],x=A.elements.name,w=A.elements.description,j=document.querySelector(".popup_type_change-avatar"),T=document.forms["new-avatar"],O=T.elements.link,P=document.querySelector(".popup_type_new-card"),B=document.querySelector(".profile__add-button"),I=document.forms["new-place"],D=I.elements["place-name"],M=I.elements.link,U=document.querySelector(".popup_type_image"),N=document.querySelector(".popup__image"),H=document.querySelector(".popup__caption"),J={formSelector:".popup__form",inputSelector:".popup__input",submitButtonSelector:".popup__button",inactiveButtonClass:"popup__button_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__error_visible"},V=function(e){d(U),N.src=e.link,N.alt=e.name,H.textContent=e.name};Promise.all([o("users/me",{headers:r.headers}),o("cards",{headers:r.headers})]).then((function(e){var t,n,r=(n=2,function(e){if(Array.isArray(e))return e}(t=e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,c,i=[],u=!0,l=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=a.call(n)).done)&&(i.push(r.value),i.length!==t);u=!0);}catch(e){l=!0,o=e}finally{try{if(!u&&null!=n.return&&(c=n.return(),Object(c)!==c))return}finally{if(l)throw o}}return i}}(t,n)||function(e,t){if(e){if("string"==typeof e)return _(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],a=r[1];i=o._id,S.textContent=o.name,g.textContent=o.about,k.setAttribute("style","background-image: url(".concat(o.avatar,");")),a.forEach((function(e){var t;t=u(e,i,l,s,V),b.append(t)}))})).catch((function(e){console.log(e)})),L.forEach((function(e){e.addEventListener("click",(function(e){var t=e.target.closest(".popup");f(t)}))})),E.forEach((function(e){e.addEventListener("click",(function(t){!function(e,t){e.currentTarget===e.target&&f(t)}(t,e)}))})),q.addEventListener("click",(function(){x.value=S.textContent,w.value=g.textContent,y(A,J),d(C)})),A.addEventListener("submit",(function(e){n((function(){return function(e,t){return o("users/me",{method:"PATCH",headers:r.headers,body:JSON.stringify({name:e,about:t})})}(x.value,w.value).then((function(e){S.textContent=e.name,g.textContent=e.about,f(C)}))}),e)})),B.addEventListener("click",(function(){d(P)})),I.addEventListener("submit",(function(e){n((function(){return(e=D.value,t=M.value,o("cards",{method:"POST",headers:r.headers,body:JSON.stringify({name:e,link:t})})).then((function(e){var t=u(e,i,l,s,V);b.prepend(t),f(P),y(I,J)}));var e,t}),e)})),k.addEventListener("click",(function(){d(j)})),T.addEventListener("submit",(function(e){n((function(){return Promise.all([(e=O.value,fetch("".concat(e),{method:"HEAD"}).then((function(e){if(!e.ok&&!e.headers.get("Content-Type").includes("image"))return Promise.reject("Ошибка: ".concat(e.status))}))),a(O.value)]).then((function(e){var t=e[1];k.setAttribute("style","background-image: url(".concat(t.avatar,");")),f(j),y(T,J)}));var e}),e)})),h=J,Array.from(document.querySelectorAll(h.formSelector)).forEach((function(e){e.addEventListener("submit",(function(e){e.preventDefault()})),function(e,t){var n=Array.from(e.querySelectorAll(t.inputSelector)),r=e.querySelector(t.submitButtonSelector);v(n,r,t),n.forEach((function(o){o.addEventListener("input",(function(){!function(e,t,n){t.validity.patternMismatch?t.setCustomValidity(t.dataset.errorMessage):t.setCustomValidity(""),t.validity.valid?m(e,t,n):function(e,t,n,r){var o=e.querySelector(".".concat(t.name,"-error"));t.classList.add(r.inputErrorClass),o.textContent=n,o.classList.add(r.errorClass)}(e,t,t.validationMessage,n)}(e,o,t),v(n,r,t)}))}))}(e,h)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,